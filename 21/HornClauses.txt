# Логика Хоара

{P} S {Q} - тройка Хоара (предусловие, оператор, постусловие).

1) Присваивание:
  ---------------------
  |- {Q[E|x} x := E {Q}
2) Усиление P:
  |- {P'} S {Q} P => P'
  ---------------------
  |- {P} S {Q
3) Ослабление Q:
  |- {P} S {Q'} Q' => Q
  ---------------------
  |- {P} S {Q}
4) Композиция:
  |- {P} S1 {Q}, {Q} S2 {R}
  -------------------------
  |- {P} S1; S2 {Q}
5) Условие:
  {B /\ P} S {Q}. {! B /\ P} T {Q}
  --------------------------------
  {P} if B then S else T endif {Q}
6) Цикл:
  {P /\ C} S {P}
  --------------
  {P} while C do S {P /\ ! C}

# Верификация

Прямой вывод: строит strongest postcondition и проверяет
  sp(S, PreCond) -> PostCond

Обратный вывод: строит weakest precondition и проверяет
  PreCond -> wp(S, PostCond)

Обратный вывод как правило приводит более слабым (и потому более удобным) инвариантом.

Расширим язык для указания инвариантов циклом (инварианты даёт оракул - человек или стат. анализ):
  while C do [I] S

wp вычислить для циклов не всегда можно, поэтому используют приближённое wp (awp):
  awp(while C do [I] S, Q) = I
Нужно ещё потребовать verification condition:
  VC(while C do [I] S, Q) =
    /\ (I /\ ! C => Q) (достаточность инварианта)
    /\ {I /\ C} S {I} (индукция)
т.е.
  I /\ C => awp(S, I) /\ VC(S, I)

Для остальных операторов:
  VC(x := E, Q) := true
  VC(S1; S2, Q) := VC(S2, Q) /\ VC(awp(Q, S2), S1)
  VC(if B then S else T, Q) := VC(S1) /\ VC(S2, Q)

Тройка {P} S {Q} выполняется iff формула
  VC(S, Q) /\ (P -> awp(S, Q))
общезначима.

Верно ли обратное? Если в программе есть циклы, то нет, т,к. инвариант может быть недостаточно сильным.

# Автоматический вывод инвариантов

Уберём требование к указанию инвариантов и заменим их на неинтерпретируемые символы Inv_i.
Формула верификации станет логическим уравнением H на символы Inv_i.
Такая формула называется системой дизъюнктов Хорна (Horne clause system).

Пусть у нас есть формула H и модель M.

Система дизъюнктов выполнима если можно подобрать такие символы Inv_i,
что в обогащённой модели выполнимы все C_i ???
  \forall C_i, {M, P_1 <- x_1, ... P_n <- x_n} |= C_i

Resolution calculus: можно привести всё к КНФ и реализовать вывод как поиск пустого дизъюнкта (Prolog).

Систему дизъюнктов можно выразить в SMTLIB и решить например с помощью Z3.
